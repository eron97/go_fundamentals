Arrays
Possuem elementos do mesmo tipo com tamanho pré-definido

	var arr [10]int
	fmt.Println(arr) // saída -> [0 0 0 0 0 0 0 0 0 0]

	arr2 := [5]int{1, 2, 3, 4, 5}
	fmt.Println(arr2) // saída -> [1 2 3 4 5]





Slices
Sequências de elementos do mesmo tipo com tamanho dinâmico.
São criados a partir de arrays ou outros slices.

	array := [5]int{1, 2, 3, 4, 5}
	slice := array[0:3]
	fmt.Println(slice) // saída -> [1 2 3]

	slice = append(slice, 4, 5)
	fmt.Println(slice) // saída -> [1 2 3 4 5]

Criando um slice a partir de dois arrays subjacentes

	array1 := [3]int{10, 20, 30}
	array2 := [2]int{40, 50}

	var slice []int
	slice = append(slice, array1[:]...)
	slice = append(slice, array2[:]...)
	fmt.Println(slice) // saída -> [10, 20, 30, 40, 50]





Maps
Estruturas que associam chaves e valores

	m1 := map[string]int{
		"a": 1,
		"b": 2,
		"c": 3,
	}

	m1["d"] = 4

	fmt.Println(m1) // saída -> map[a:1 b:2 c:3 d:4]

	m2 := map[rune]string{}
	m2['a'] = "A"
	m2['b'] = "B"

	fmt.Println(m2) // saída -> map[97:A 98:B]





Strucs
Dados definidos pelo usuário que permitem agrupar/combinar itens de tipos
diferentes em um único tipo.

	// Criação de uma struct
	type Person struct {
		age  int
		name string
	}

	// Criação de uma instância da struct
	var person Person

	// Atribuição de valores
	person.age = 30
	person.name = "John Doce"

	fmt.Printf("Name: %s with age: %d", person.name, person.age)
	// saída -> Name: John Doce with age: 30


Podemos ter structs que são implementas dentro de outras:

	type car struct {
		Model string
		Motor motor
	}

	type motor struct {
		NameMotor string
		Power     string
	}

	func model_car(c car) {
		fmt.Printf("My car is a model: %s and Motor with power %s\n", c.Model, c.Motor.Power)
	}

	func main() {

		my_car := car{
			Model: "Ferrari Ferrari",
			Motor: motor{
				NameMotor: "V220",
				Power:     "500",
			},
		}

		model_car(my_car)
		// saída -> My car is a model: Ferrari Ferrari and Motor with power 500

	}


Podemos ter strucs anônimas e aninhadas onde são declaras e incializadas dentro do escopo da func main(){}

	animals := struct {
		Mammals struct {
			Race  string
			Color string
			Size  string
			/// ...
		}
		Amphibians struct{}
		/// ...
	}{
		/// ...
	}

	fmt.Println(animals)

